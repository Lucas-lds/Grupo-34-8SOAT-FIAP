name: Full Cloud Deploy

on:
  push:
    branches:
      - main

jobs:
  # 1. Build e validação da aplicação
  build-application:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build application
        run: |
          chmod +x mvnw # Concede permissão de execução ao Maven Wrapper
          ./mvnw clean verify jacoco:report

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./mvnw sonar:sonar \
          -Dsonar.projectKey=Lucas-lds_Grupo-34-8SOAT-FIAP \
          -Dsonar.organization=lucas-lds \
          -Dsonar.projectName=Grupo-34-restaurante \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml


  # 2. Provisionar infraestrutura com Terraform
  provision-infrastructure:
    runs-on: ubuntu-latest
    needs: build-application
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Plan
        id: terraform-plan
        run: terraform plan -out=tfplan
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply (Conditional)
        if: steps.terraform-plan.outcome == 'successs'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          

# 3. Build Microsserviços
  deploy-produto:
    runs-on: ubuntu-latest
    needs: 
      - build-application
      - provision-infrastructure
    steps:
      - name: Chamar Deploy do Repositório Produto
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.REPO_PROD_DEPLOY_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/Lucas-lds/grupo-34-restaurante-produto/actions/workflows/pipeline.yml/dispatches \
          -d '{"ref":"main"}'

  deploy-pedido:
    runs-on: ubuntu-latest
    needs: 
      - build-application
      - provision-infrastructure
    steps:
      - name: Chamar Deploy do Repositório Pedido
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.REPO_PEDIDO_DEPLOY_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/Lucas-lds/grupo-34-restaurante-pedido/actions/workflows/pipeline.yml/dispatches \
          -d '{"ref":"master"}'

  deploy-pagamento:
    runs-on: ubuntu-latest
    needs: 
      - build-application
      - provision-infrastructure
    steps:
      - name: Chamar Deploy do Repositório Pagamento
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.REPO_PAGAMENTO_DEPLOY_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/Lucas-lds/grupo-34-restaurante-pagamento/actions/workflows/pipeline.yml/dispatches \
          -d '{"ref":"master"}'
      
  #     - name: Export Infra Variables
  #       if: steps.terraform-plan.outcome == 'successs'
  #       id: export-vars
  #       run: |
  #         # Obtemos a URL do API Gateway do Terraform Output
  #         GATEWAY_URL=$(terraform output -raw gateway_url)
  #         COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
          
  #         # Defina manualmente a região ou utilize um secret/variável
  #         REGION="us-east-1"  # Exemplo de região manualmente atribuída
      
  #         # Substitua o * na URL do API Gateway pela região
  #         FORMATTED_GATEWAY_URL=$(echo $GATEWAY_URL | sed "s/\*\*\*/$REGION/")
  #         FORMATTED_COGNITO_USER_POOL_ID=$(echo $COGNITO_USER_POOL_ID | sed "s/\*\*\*/$REGION/")
      
  #         # Exibe a URL formatada para depuração
  #         echo "Formatted Gateway URL: $FORMATTED_GATEWAY_URL"
  #         echo "Formatted COGNITO USER POOL ID: $FORMATTED_COGNITO_USER_POOL_ID"

  #         # Exporta as variáveis para o GitHub Environment
  #         echo "GATEWAY_URL=$FORMATTED_GATEWAY_URL" >> $GITHUB_ENV
  #         echo "COGNITO_USER_POOL_ID=$FORMATTED_COGNITO_USER_POOL_ID" >> $GITHUB_ENV 
  #       working-directory: terraform/
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: ${{ secrets.AWS_REGION }}

  #     - name: Inject Environment Variables into application
  #       if: steps.terraform-plan.outcome == 'successs'
  #       run: |
  #         sed -i "s|gateway_url=.*|gateway_url=${{ env.GATEWAY_URL }}|" src/main/resources/application.properties
  #         sed -i "s|cognito_user_pool_id=.*|cognito_user_pool_id=${{ env.COGNITO_USER_POOL_ID }}|" src/main/resources/application.properties
