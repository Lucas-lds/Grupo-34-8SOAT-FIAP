name: Full Cloud Deploy

on:
  push:
    branches:
      - main

jobs:
  # 1. Build e validação da aplicação
  build-application:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build application
        run: |
          chmod +x mvnw # Concede permissão de execução ao Maven Wrapper
          ./mvnw clean package -DskipTests=true

      - name: Upload application artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: target/*.jar

  # 2. Provisionar infraestrutura com Terraform (sem destroy)
  provision-infrastructure:
    runs-on: ubuntu-latest
    needs: build-application
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Plan
        id: terraform-plan
        run: terraform plan -out=tfplan
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply (Conditional)
        if: steps.terraform-plan.outcome == 'success'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Check Outputs in Terraform
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"
          terraform output gateway_url
          terraform output cognito_user_pool_id
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
      - name: Export Infra Variables
        id: export-vars
        run: |
          # Obtemos a URL do API Gateway do Terraform Output
          GATEWAY_URL=$(terraform output -raw gateway_url)
          COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
          
          # Defina manualmente a região ou utilize um secret/variável
          REGION="us-east-1"  # Exemplo de região manualmente atribuída
      
          # Substitua o * na URL do API Gateway pela região
          FORMATTED_GATEWAY_URL=$(echo $GATEWAY_URL | sed "s/\*\*\*/$REGION/")
          FORMATTED_COGNITO_USER_POOL_ID=$(echo $COGNITO_USER_POOL_ID | sed "s/\*\*\*/$REGION/")
      
          # Exibe a URL formatada para depuração
          echo "Formatted Gateway URL: $FORMATTED_GATEWAY_URL"
          echo "Formatted COGNITO USER POOL ID: $FORMATTED_COGNITO_USER_POOL_ID"

          # Exporta as variáveis para o GitHub Environment
          echo "GATEWAY_URL=$FORMATTED_GATEWAY_URL" >> $GITHUB_ENV
          echo "COGNITO_USER_POOL_ID=$FORMATTED_COGNITO_USER_POOL_ID" >> $GITHUB_ENV

        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}


  # 3. Configuração dinâmica do backend e deploy no Kubernetes
  configure-backend:
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download application artifact
        uses: actions/download-artifact@v3
        with:
          name: app-jar

      - name: Apply Terraform configurations
        run: | # Passa as variáveis do GATEWAY_URL e COGNITO_USER_POOL_ID para o Terraform
          terraform apply -var "gateway_url=$GATEWAY_URL" -var "cognito_user_pool_id=$COGNITO_USER_POOL_ID" -auto-approve
        working-directory: terraform/
    
      - name: Deploy application to Kubernetes
        run: | # Em vez de usar kubectl get, já aplicamos a configuração diretamente com Terraform
          kubectl rollout status deployment restaurante-api
        working-directory: terraform/

  # 4. Deploy da função Lambda
  deploy-lambda:
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda
        run: |
          zip function.zip lambda/lambda_function.py
          aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --zip-file fileb://function.zip
